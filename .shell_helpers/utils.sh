#!/usr/bin/env bash

# reset
readonly RESET="\033[0m"       # Text Reset

# color variables
readonly BLACK="\033[0;30m"        # Black
readonly RED="\033[0;31m"          # Red
readonly GREEN="\033[0;32m"        # Green
readonly YELLOW="\033[0;33m"       # Yellow
readonly BLUE="\033[0;34m"         # Blue
readonly PURPLE="\033[0;35m"       # Purple
readonly CYAN="\033[0;36m"         # Cyan
readonly WHITE="\033[0;37m"        # White

# echoc - echo color adds a color wrapper then resets
echoc() {
  echo -e "$1$2${RESET}"
}

# git branch in prompt
parse_git_branch() {
      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# wallpaper is to change the current wallpaper to an image on mac only
# great for scripting download of wallpaper and automating changing it.
wallpaper() {
    sqlite3 ~/Library/Application\ Support/Dock/desktoppicture.db "update data set value = '$1'" && killall Dock
}

# getting abspath on mac, which i use for the wallpaper function
getAbsolutePath(){
    [[ -d $1 ]] && { cd "$1"; echo "$(pwd -P)"; } ||
    { cd "$(dirname "$1")"; echo "$(pwd -P)/$(basename "$1")"; }
}

# runs something once after restart
runonce(){
  if [[ $# -eq 0 ]]; then
      echo "Schedules a command to be run after the next reboot."
      echo "Usage: $(basename $0) <command>"
      echo "       $(basename $0) -p <path> <command>"
      echo "       $(basename $0) -r <command>"
  else
      REMOVE=0
      COMMAND=${!#}
      SCRIPTPATH=$PATH

      while getopts ":r:p:" optionName; do
          case "$optionName" in
              r) REMOVE=1; COMMAND=$OPTARG;;
              p) SCRIPTPATH=$OPTARG;;
          esac
      done

      SCRIPT="${HOME}/.$(basename $0)_$(echo $COMMAND | sed 's/[^a-zA-Z0-9_]/_/g')"

      if [[ ! -f $SCRIPT ]]; then
          echo "PATH=$SCRIPTPATH" >> $SCRIPT
          echo "cd $(pwd)"        >> $SCRIPT
          echo "logger -t $(basename $0) -p local3.info \"COMMAND=$COMMAND ; USER=\$(whoami) ($(logname)) ; PWD=$(pwd) ; PATH=\$PATH\"" >> $SCRIPT
          echo "$COMMAND | logger -t $(basename $0) -p local3.info" >> $SCRIPT
          echo "$0 -r \"$(echo $COMMAND | sed 's/\"/\\\"/g')\""     >> $SCRIPT
          chmod +x $SCRIPT
      fi

      CRONTAB="${HOME}/.$(basename $0)_temp_crontab_$RANDOM"
      ENTRY="@reboot $SCRIPT"

      echo "$(crontab -l 2>/dev/null)" | grep -v "$ENTRY" | grep -v "^# DO NOT EDIT THIS FILE - edit the master and reinstall.$" | grep -v "^# ([^ ]* installed on [^)]*)$" | grep -v "^# (Cron version [^$]*\$[^$]*\$)$" > $CRONTAB

      if [[ $REMOVE -eq 0 ]]; then
          echo "$ENTRY" >> $CRONTAB
      fi

      crontab $CRONTAB
      rm $CRONTAB

      if [[ $REMOVE -ne 0 ]]; then
          rm $SCRIPT
      fi
  fi
}
